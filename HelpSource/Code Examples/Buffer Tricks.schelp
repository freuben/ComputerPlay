TITLE::Buffer Tricks
summary:: Computer.play(Music, Creativity & Code)
categories:: Tutorials/ComputerDotPlay
related:: Computer, Study Guides/Digital Audio, Study Guides/Digital Synthesis

section::Recording

Play something...
code::
s.boot;

a = {Pan2.ar(SinOsc.ar(SinOsc.kr(MouseX.kr(1,2000), mul: MouseY.kr(200,4000), add: MouseY.kr(200,4000)), 0, 0.2), SinOsc.kr(MouseX.kr(1,10))) }.play;
::
The easiest way to record is with the record button in the server window
list::
##start recording (press record button)
##wait a bit
##stop recording (press button again)
##Now, go to the folder Muisc/SuperCollider Recordings
##The recording is there!
::

Sometimes, when recording (but not only!), it is useful to see your input and output levels. You can do that if click on the server window and then press “l”. A window with the inputs and outputs will show up


subsection::Buffers

Buffers are bits of data allocated in your computer memory. In order to manipulate sound files, we need to allocate the data from the sound file in the computer memory

Buffers can contain all sort of data (not only soundfiles) and it is stored as an Array (collection) of foating-point numbers

check the Buffer help file for more information
code::
s.boot; //first boot server

a = Buffer.loadDialog; //load a soundfile into a buffer;
a.plot;

a.getn(10*44100, 512, {|msg| ~array = msg}); //get 512 float numbers and store them in a global variable as an array
::
Post << ~array; // post the whole array!

strong::PlayBuf  (Play from Buffer)::

PlayBuf is a UGen we use to play buffers

code::
a = Buffer.loadDialog; //load a soundfile into a buffer;

{PlayBuf.ar(a.numChannels, a.bufnum)}.play;

a.free; //after finishing, you have to release the buffer to release the memory
::
if you want to specify the path from the soundfile, then you can use the message “read”

if you want to get the specific path for a soundfile, simply drag the file into this document
code::
a = Buffer.read(s, "/Users/freuben/Music/MastersExamples/01 15 Steps.wav"); //fixed path (your own)

{PlayBuf.ar(a.numChannels, a.bufnum, BufRateScale.kr(a.bufnum))}.play;

{PlayBuf.ar(a.numChannels, a.bufnum, MouseX.kr(0.2,4.0))}.play; //change play rate

{PlayBuf.ar(a.numChannels, a.bufnum, MouseX.kr(0.2,4.0), Impulse.kr(MouseY.kr(0.1,10)), MouseY.kr(0,a.numFrames), loop:1)}.play; //loop, trigger and startPos

b = {{Pan2.ar(Mix.ar(PlayBuf.ar(a.numChannels, a.bufnum, Rand(0.1,4.0), Impulse.kr(Rand(0.1,10)), Rand(0,a.numFrames), loop:1))*EnvGen.kr(Env.perc(0.01*Rand(0.5,2.0), 0.5*Rand(0.5,2.0)), doneAction:2), Rand(-1,1.0))}.play;} //loop, trigger and startPos

~tempoMul = 1;
{inf.do{b.value; (~tempoMul*rrand(0.01,0.4)).yield}}.fork;
~tempoMul = 0.1;
~tempoMul = 1.2;
::

subsection::SoundIn (Read from audio input)

SoundIn reads an input from your computer
code::
{SoundIn.ar(0)}.play //be careful with feedback (wear headphones)

{SoundIn.ar(0)*SinOsc.ar(440)}.play //simple ring modulation

//bathroom reverb
a = {arg roomsize=5, revtime=0.6, damping=0.62, inputbw=0.48, spread = 15, drylevel= -6, earlylevel= -11, taillevel= -13, wet=0.3, dry=1.0;
	var input, wetSignal, drySignal, output;
	input = Pan2.ar(SoundIn.ar(0), 0);
	wetSignal = GVerb.ar(input, roomsize, revtime, damping, inputbw, spread, drylevel.dbamp, earlylevel.dbamp, taillevel.dbamp, roomsize, wet);
	drySignal = (input*dry);
	output = wetSignal + drySignal;
}.play

//change it to a living room
a.set(\roomsize, 16, \revtime, 1.24, \damping, 0.10, \inputbw, 0.95, \drylevel -3, \earlylevel, -15, \taillevel, -17);

a.set(\wet, 0.8);

a.set(\wet, 0.3);

//church
a.set(\roomsize, 80, \revtime, 4.85, \damping, 0.41, \inputbw, 0.19, \drylevel -3, \earlylevel, -9, \taillevel, -11);

//cathedral
a.set(\roomsize, 243, \revtime, 5, \damping, 0.1, \inputbw, 0.34, \drylevel -3, \earlylevel, -11, \taillevel, -9);

a.set(\dry, 0.3);
a.set(\wet, 1.0);
::

subsection::RecordBuf  (Play from Buffer)

Allocate an empty buffer to record into
code::
b = Buffer.alloc(s, 44100 * 4.0, 1); // a four second 1 channel Buffer
::

Record for four seconds
code::
(
{var input, nooutput=0;
    input = SoundIn.ar(0); //microphone at first input
    RecordBuf.ar(input, b, doneAction: 2, loop: 0);
	nooutput;
}.play
)
::
Play it back
code::
{PlayBuf.ar(1,b, doneAction: 2);}.play;
::

Overdub
code::
(
{var input, nooutput=0;
    input = SoundIn.ar(0); //microphone at first input
      RecordBuf.ar(input, b, 0, 0.5, 0.5, doneAction: 2, loop: 0);
	nooutput;
}.play
)
::

Play it back
code::
{Pan2.ar(PlayBuf.ar(1,b, loop: 1),0);}.play;

b.plot;
::
Write the contents of the buffer to a file (see Buffer for more options)
code::
b.write;
::
Now lets try to use loop in RecordBuf
code::
// play it back
{Pan2.ar(PlayBuf.ar(1,b, loop: 1),0);}.play;
::
Overdub with loop
code::
(
a = {arg loop=1;
	var input, nooutput=0;
    input = SoundIn.ar(0); //microphone at first input
      RecordBuf.ar(input, b, 0, 0.5, 0.5, doneAction: 2, loop: loop);
	nooutput;
}.play
)

a.set(\loop, 0); //stop overdubing

a.set(\loop, 1); //start overdubing again


b.free; //free buffer
::

section::Granular Synthesis
code::
~path = "/Users/federicoreuben/Music/MastersExamples/01 15 Steps.wav";
b = Buffer.readChannel(s, ~path, channels: [0]); //read just the first channel of soundfile

Ndef(\grains).play;
Ndef(\grains).fadeTime = 1;

(
//simple example
Ndef(\grains, {var rate = 50, amp = 0.2, grainDur=0.005;
	TGrains.ar(2,Impulse.kr(rate), b.bufnum, 1,
		Line.kr(0, b.duration, b.duration, doneAction: 2),grainDur,0,amp,1);
})
)
::

With Dseq:
code::
(
Ndef(\grains, {
    var trate, dur, rate;
    trate = MouseY.kr(2,200,1);
    dur = 4 / trate;
    rate = Dseq([10, 1, 1, 0.5, 0.5, 0.2, 0.1], inf);
    TGrains.ar(2, Impulse.ar(trate), b, rate, MouseX.kr(0,BufDur.kr(b)),
		dur, Dseq([-1, 1], inf), 0.1, 2);
});
)
::
Mouse determines trate and position
code::
(
Ndef(\grains, {
    var trate, dur, clk, pos, pan;
    trate = MouseY.kr(8,120,1);
    dur = 12 / trate;
    clk = Impulse.kr(trate);
    pos = MouseX.kr(0,BufDur.kr(b)) + TRand.kr(0, 0.01, clk);
    pan = WhiteNoise.kr(0.6);
    TGrains.ar(2, clk, b, 1, pos, dur, pan, 0.1);
});
)
::

Experimenting with trate
code::
(
Ndef(\grains, {
    var trate, dur, clk, pos, pan;
    trate = LinExp.kr(LFTri.kr(MouseY.kr(0.1,2,1)),-1,1,8,120);
    dur = 12 / trate;
    clk = Impulse.ar(trate);
    pos = MouseX.kr(0,BufDur.kr(b));
    pan = WhiteNoise.kr(0.6);
    TGrains.ar(2, clk, b, 1, pos, dur, pan, 0.1);
});
)
::

Noisy rate
code::
(
Ndef(\grains, {
    var trate, dur, clk, pos, pan;
    trate = MouseY.kr(1,400,1);
    dur = 8 / trate;
    clk = Impulse.kr(trate);
    pos = MouseX.kr(0,BufDur.kr(b));
    pan = WhiteNoise.kr(0.8);
    TGrains.ar(2, clk, b, 2 ** WhiteNoise.kr(2), pos, dur, pan, 0.1);
});
)
::
Play with duration
code::
(
Ndef(\grains, {
    var trate, dur;
    trate = MouseY.kr(2,120,1);
    dur = 1.2 / trate;
    TGrains.ar(2, Impulse.ar(trate), b, (1.2 ** WhiteNoise.kr(3).round(1)),
		MouseX.kr(0,BufDur.kr(b)), dur, WhiteNoise.kr(0.6), 0.1);
});
)
::
Demand ugens as inputs
code::
(
Ndef(\grains, {
    var trate, dur, z, d;
    trate = MouseX.kr(1, 100, 1);
    d = { Dwhite(0.1, 0.2, 1) };
    z = {
        Drand([Dgeom(0.1, 1 + d.value, Diwhite(20, 40)),
			Dgeom(1, 1 - d.value, Diwhite(20, 40))])
    };
    TGrains.ar(2,
        Impulse.ar(trate),
        bufnum: b,
        rate: Dseq([1, 1, z.value, 0.5, 0.5, 0.2, 0.1, 0.1, 0.1, 0.1], inf) * 2 + 1,
        centerPos: Dseq(z.dup(8), inf),
        dur: Dseq([1, d.value, 1, z.value, 0.5, 0.5, 0.1, z.value] * 2, inf) / trate,
        pan: Dseq([1, 1, 1, 0.5, 0.2, 0.1, 0, 0, 0], inf) * 2 - 1,
        amp: Dseq([1, 0, z.value, 0, 2, 1.0, 1, 0.1, 0.1], inf)
    )*0.6;
});
)
::

Change rate and get minimalism
code::
(
Ndef(\grains, {var bdur = 10, rate = 1, amp = 0.2, stretch = 20, grainDur, trigger;
grainDur = 1/rate * stretch * 2.0;
	trigger = Impulse.kr(rate);
     Mix.fill(5,{TGrains.ar(2,trigger, b.bufnum, 1,Line.kr(0.3.rand,bdur + 0.3.rand, bdur * stretch, doneAction: 2) + TRand.kr(0,1/(bdur*stretch),trigger),grainDur,0,amp,1);})
});
)
::

Trigger with dust
code::
(
Ndef(\grains, {var bdur = 10, rate = 1, amp = 0.2, stretch, grainDur, trigger;
	trigger = Dust.kr(rate);
	stretch = MouseX.kr(1, 20);
	grainDur = 1/rate * stretch * 2.0;
     Mix.fill(5,{TGrains.ar(2,trigger, b.bufnum, TRand.kr(2.0,0.5, trigger), Line.kr(0.3.rand,bdur + 0.3.rand, bdur * stretch, doneAction: 2) + TRand.kr(0,1/(bdur*stretch),trigger),grainDur,0,amp,1);})
})
)
::
Multiple layers of triggering with Dust
code::
// make Synthdef
(
SynthDef(\dustGrains, { |bufnum = 0, out = 0, trate = 50, amp = 0.3, grainDur=0.05|
	var trigger, bdur;
	trigger = Dust.kr(trate);
	bdur = b.duration;
	Out.ar(0, TGrains.ar(2, trigger, b.bufnum, 1, TRand.kr(0,1,trigger) * bdur, TRand.kr(0.00001,MouseX.kr(0.0001,0.05),trigger),TRand.kr(-1,1,trigger))*amp)
}).load(s)
)
::
Start multiple instances:
code::
Ndef(\grains).put(0, \dustGrains, extraArgs: [\trate,5]);
Ndef(\grains).put(1, \dustGrains, extraArgs: [\trate,6]);
Ndef(\grains).put(2, \dustGrains, extraArgs: [\trate,4]);
Ndef(\grains).put(3, \dustGrains, extraArgs: [\trate,9]);
Ndef(\grains).put(4, \dustGrains, extraArgs: [\trate,2]);


Ndef(\grains).clear;

~grains = 100;
~grains.do{ Synth(\dustGrains,[\trate,rrand(1,10), \amp, 15/~grains]);}
::

section::Many SoundFiles into many Buffers

Load lots of SoundFiles into Buffers in one go through the power of Collections
code::
(
~paths = ["/Users/fr155035/Music/MastersExamples/01 15 Steps.wav", "/Users/fr155035/Music/MastersExamples/1 Earth Intruders.aiff", "/Users/fr155035/Music/MastersExamples/02 Bodysnatchers.wav", "/Users/fr155035/Music/MastersExamples/2 Nicotine & Gravy.aiff", "/Users/fr155035/Music/MastersExamples/3 Sublation.aiff", "/Users/fr155035/Music/MastersExamples/3 The Dull Flame Of Desire.aiff", "/Users/fr155035/Music/MastersExamples/04 Weird Fishes_Arpeggi.wav", "/Users/fr155035/Music/MastersExamples/7 Broken Train.aiff", "/Users/fr155035/Music/MastersExamples/07 Reckoner.wav", "/Users/fr155035/Music/MastersExamples/8 Milk & Honey.aiff", "/Users/fr155035/Music/MastersExamples/9 Beautiful Way.aiff", "/Users/fr155035/Music/MastersExamples/10 My Juvenile.aiff", "/Users/fr155035/Music/MastersExamples/11 Debra.aiff"];
)

s.boot;

(
~buffers = [];
c = Condition.new;
{~paths.do{|item|
	c.test=false;
	~buffers = ~buffers.add(Buffer.read(s, item, action: {c.test = true; c.signal}).postln);
	c.wait;}}.fork;
)

~buffers[5]
//play all of them, one after the other:
(
{~buffers.do{|item|
{PlayBuf.ar(item.numChannels, item.bufnum)}.play;
	item.duration.yield;}}.fork;
)

//play all of them at the same time:
(
{~buffers.do{|item|
{PlayBuf.ar(item.numChannels, item.bufnum)/~buffers.size}.play;}}.fork
)
::

